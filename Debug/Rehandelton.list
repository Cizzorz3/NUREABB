
Rehandelton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cc8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002dd4  08002dd4  00012dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dfc  08002dfc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002dfc  08002dfc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dfc  08002dfc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dfc  08002dfc  00012dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e00  08002e00  00012e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  08002e10  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08002e10  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbe9  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001def  00000000  00000000  0002bc1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  0002da10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  0002e720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001ab0  00000000  00000000  0002f378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d73f  00000000  00000000  00030e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f188  00000000  00000000  0003e567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd6ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003688  00000000  00000000  000cd740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002dbc 	.word	0x08002dbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002dbc 	.word	0x08002dbc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb8e 	bl	8000870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80b 	bl	800016e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f97e 	bl	8000458 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f95e 	bl	800041c <MX_DMA_Init>
  MX_ADC1_Init();
 8000160:	f000 f856 	bl	8000210 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f930 	bl	80003c8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000168:	f000 f8ae 	bl	80002c8 <MX_TIM4_Init>
// vib_off(&VIB_CNFG);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800016c:	e7fe      	b.n	800016c <main+0x20>

0800016e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016e:	b580      	push	{r7, lr}
 8000170:	b094      	sub	sp, #80	; 0x50
 8000172:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000178:	2228      	movs	r2, #40	; 0x28
 800017a:	2100      	movs	r1, #0
 800017c:	4618      	mov	r0, r3
 800017e:	f002 fe15 	bl	8002dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000182:	f107 0314 	add.w	r3, r7, #20
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
 800018a:	605a      	str	r2, [r3, #4]
 800018c:	609a      	str	r2, [r3, #8]
 800018e:	60da      	str	r2, [r3, #12]
 8000190:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800019e:	2302      	movs	r3, #2
 80001a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a2:	2301      	movs	r3, #1
 80001a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a6:	2310      	movs	r3, #16
 80001a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001aa:	2300      	movs	r3, #0
 80001ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001b2:	4618      	mov	r0, r3
 80001b4:	f001 f9da 	bl	800156c <HAL_RCC_OscConfig>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d001      	beq.n	80001c2 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80001be:	f000 f9bb 	bl	8000538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c2:	230f      	movs	r3, #15
 80001c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001c6:	2300      	movs	r3, #0
 80001c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ca:	2300      	movs	r3, #0
 80001cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001d6:	f107 0314 	add.w	r3, r7, #20
 80001da:	2100      	movs	r1, #0
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 fc47 	bl	8001a70 <HAL_RCC_ClockConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80001e8:	f000 f9a6 	bl	8000538 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80001ec:	2302      	movs	r3, #2
 80001ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4618      	mov	r0, r3
 80001f8:	f001 fdd2 	bl	8001da0 <HAL_RCCEx_PeriphCLKConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000202:	f000 f999 	bl	8000538 <Error_Handler>
  }
}
 8000206:	bf00      	nop
 8000208:	3750      	adds	r7, #80	; 0x50
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
	...

08000210 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000220:	4b27      	ldr	r3, [pc, #156]	; (80002c0 <MX_ADC1_Init+0xb0>)
 8000222:	4a28      	ldr	r2, [pc, #160]	; (80002c4 <MX_ADC1_Init+0xb4>)
 8000224:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000226:	4b26      	ldr	r3, [pc, #152]	; (80002c0 <MX_ADC1_Init+0xb0>)
 8000228:	f44f 7280 	mov.w	r2, #256	; 0x100
 800022c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800022e:	4b24      	ldr	r3, [pc, #144]	; (80002c0 <MX_ADC1_Init+0xb0>)
 8000230:	2201      	movs	r2, #1
 8000232:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000234:	4b22      	ldr	r3, [pc, #136]	; (80002c0 <MX_ADC1_Init+0xb0>)
 8000236:	2200      	movs	r2, #0
 8000238:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800023a:	4b21      	ldr	r3, [pc, #132]	; (80002c0 <MX_ADC1_Init+0xb0>)
 800023c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000240:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000242:	4b1f      	ldr	r3, [pc, #124]	; (80002c0 <MX_ADC1_Init+0xb0>)
 8000244:	2200      	movs	r2, #0
 8000246:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000248:	4b1d      	ldr	r3, [pc, #116]	; (80002c0 <MX_ADC1_Init+0xb0>)
 800024a:	2203      	movs	r2, #3
 800024c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800024e:	481c      	ldr	r0, [pc, #112]	; (80002c0 <MX_ADC1_Init+0xb0>)
 8000250:	f000 fb70 	bl	8000934 <HAL_ADC_Init>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800025a:	f000 f96d 	bl	8000538 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800025e:	2301      	movs	r3, #1
 8000260:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000262:	2301      	movs	r3, #1
 8000264:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000266:	2300      	movs	r3, #0
 8000268:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4619      	mov	r1, r3
 800026e:	4814      	ldr	r0, [pc, #80]	; (80002c0 <MX_ADC1_Init+0xb0>)
 8000270:	f000 fc38 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800027a:	f000 f95d 	bl	8000538 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800027e:	2302      	movs	r3, #2
 8000280:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000282:	2302      	movs	r3, #2
 8000284:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4619      	mov	r1, r3
 800028a:	480d      	ldr	r0, [pc, #52]	; (80002c0 <MX_ADC1_Init+0xb0>)
 800028c:	f000 fc2a 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000296:	f000 f94f 	bl	8000538 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800029a:	2303      	movs	r3, #3
 800029c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800029e:	2303      	movs	r3, #3
 80002a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4619      	mov	r1, r3
 80002a6:	4806      	ldr	r0, [pc, #24]	; (80002c0 <MX_ADC1_Init+0xb0>)
 80002a8:	f000 fc1c 	bl	8000ae4 <HAL_ADC_ConfigChannel>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80002b2:	f000 f941 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002b6:	bf00      	nop
 80002b8:	3710      	adds	r7, #16
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	20000028 	.word	0x20000028
 80002c4:	40012400 	.word	0x40012400

080002c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b08e      	sub	sp, #56	; 0x38
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002dc:	f107 0320 	add.w	r3, r7, #32
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
 80002f4:	615a      	str	r2, [r3, #20]
 80002f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80002f8:	4b31      	ldr	r3, [pc, #196]	; (80003c0 <MX_TIM4_Init+0xf8>)
 80002fa:	4a32      	ldr	r2, [pc, #200]	; (80003c4 <MX_TIM4_Init+0xfc>)
 80002fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;
 80002fe:	4b30      	ldr	r3, [pc, #192]	; (80003c0 <MX_TIM4_Init+0xf8>)
 8000300:	2207      	movs	r2, #7
 8000302:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000304:	4b2e      	ldr	r3, [pc, #184]	; (80003c0 <MX_TIM4_Init+0xf8>)
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800030a:	4b2d      	ldr	r3, [pc, #180]	; (80003c0 <MX_TIM4_Init+0xf8>)
 800030c:	2263      	movs	r2, #99	; 0x63
 800030e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000310:	4b2b      	ldr	r3, [pc, #172]	; (80003c0 <MX_TIM4_Init+0xf8>)
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000316:	4b2a      	ldr	r3, [pc, #168]	; (80003c0 <MX_TIM4_Init+0xf8>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800031c:	4828      	ldr	r0, [pc, #160]	; (80003c0 <MX_TIM4_Init+0xf8>)
 800031e:	f001 fdf5 	bl	8001f0c <HAL_TIM_Base_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000328:	f000 f906 	bl	8000538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800032c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000330:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000336:	4619      	mov	r1, r3
 8000338:	4821      	ldr	r0, [pc, #132]	; (80003c0 <MX_TIM4_Init+0xf8>)
 800033a:	f002 f855 	bl	80023e8 <HAL_TIM_ConfigClockSource>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000344:	f000 f8f8 	bl	8000538 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000348:	481d      	ldr	r0, [pc, #116]	; (80003c0 <MX_TIM4_Init+0xf8>)
 800034a:	f001 fe2e 	bl	8001faa <HAL_TIM_PWM_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000354:	f000 f8f0 	bl	8000538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000358:	2300      	movs	r3, #0
 800035a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800035c:	2300      	movs	r3, #0
 800035e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000360:	f107 0320 	add.w	r3, r7, #32
 8000364:	4619      	mov	r1, r3
 8000366:	4816      	ldr	r0, [pc, #88]	; (80003c0 <MX_TIM4_Init+0xf8>)
 8000368:	f002 fbb0 	bl	8002acc <HAL_TIMEx_MasterConfigSynchronization>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000372:	f000 f8e1 	bl	8000538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000376:	2360      	movs	r3, #96	; 0x60
 8000378:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2200      	movs	r2, #0
 800038a:	4619      	mov	r1, r3
 800038c:	480c      	ldr	r0, [pc, #48]	; (80003c0 <MX_TIM4_Init+0xf8>)
 800038e:	f001 ff6d 	bl	800226c <HAL_TIM_PWM_ConfigChannel>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000398:	f000 f8ce 	bl	8000538 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2204      	movs	r2, #4
 80003a0:	4619      	mov	r1, r3
 80003a2:	4807      	ldr	r0, [pc, #28]	; (80003c0 <MX_TIM4_Init+0xf8>)
 80003a4:	f001 ff62 	bl	800226c <HAL_TIM_PWM_ConfigChannel>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80003ae:	f000 f8c3 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80003b2:	4803      	ldr	r0, [pc, #12]	; (80003c0 <MX_TIM4_Init+0xf8>)
 80003b4:	f000 f976 	bl	80006a4 <HAL_TIM_MspPostInit>

}
 80003b8:	bf00      	nop
 80003ba:	3738      	adds	r7, #56	; 0x38
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	2000009c 	.word	0x2000009c
 80003c4:	40000800 	.word	0x40000800

080003c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003ce:	4a12      	ldr	r2, [pc, #72]	; (8000418 <MX_USART1_UART_Init+0x50>)
 80003d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003ee:	220c      	movs	r2, #12
 80003f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_USART1_UART_Init+0x4c>)
 8000400:	f002 fbd4 	bl	8002bac <HAL_UART_Init>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800040a:	f000 f895 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	200000e4 	.word	0x200000e4
 8000418:	40013800 	.word	0x40013800

0800041c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <MX_DMA_Init+0x38>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a0b      	ldr	r2, [pc, #44]	; (8000454 <MX_DMA_Init+0x38>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6153      	str	r3, [r2, #20]
 800042e:	4b09      	ldr	r3, [pc, #36]	; (8000454 <MX_DMA_Init+0x38>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800043a:	2200      	movs	r2, #0
 800043c:	2100      	movs	r1, #0
 800043e:	200b      	movs	r0, #11
 8000440:	f000 fd61 	bl	8000f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000444:	200b      	movs	r0, #11
 8000446:	f000 fd7a 	bl	8000f3e <HAL_NVIC_EnableIRQ>

}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046c:	4b2f      	ldr	r3, [pc, #188]	; (800052c <MX_GPIO_Init+0xd4>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a2e      	ldr	r2, [pc, #184]	; (800052c <MX_GPIO_Init+0xd4>)
 8000472:	f043 0310 	orr.w	r3, r3, #16
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b2c      	ldr	r3, [pc, #176]	; (800052c <MX_GPIO_Init+0xd4>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0310 	and.w	r3, r3, #16
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000484:	4b29      	ldr	r3, [pc, #164]	; (800052c <MX_GPIO_Init+0xd4>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a28      	ldr	r2, [pc, #160]	; (800052c <MX_GPIO_Init+0xd4>)
 800048a:	f043 0320 	orr.w	r3, r3, #32
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b26      	ldr	r3, [pc, #152]	; (800052c <MX_GPIO_Init+0xd4>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0320 	and.w	r3, r3, #32
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	4b23      	ldr	r3, [pc, #140]	; (800052c <MX_GPIO_Init+0xd4>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a22      	ldr	r2, [pc, #136]	; (800052c <MX_GPIO_Init+0xd4>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b20      	ldr	r3, [pc, #128]	; (800052c <MX_GPIO_Init+0xd4>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0304 	and.w	r3, r3, #4
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b4:	4b1d      	ldr	r3, [pc, #116]	; (800052c <MX_GPIO_Init+0xd4>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a1c      	ldr	r2, [pc, #112]	; (800052c <MX_GPIO_Init+0xd4>)
 80004ba:	f043 0308 	orr.w	r3, r3, #8
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b1a      	ldr	r3, [pc, #104]	; (800052c <MX_GPIO_Init+0xd4>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0308 	and.w	r3, r3, #8
 80004c8:	603b      	str	r3, [r7, #0]
 80004ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2108      	movs	r1, #8
 80004d0:	4817      	ldr	r0, [pc, #92]	; (8000530 <MX_GPIO_Init+0xd8>)
 80004d2:	f001 f833 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004d6:	2308      	movs	r3, #8
 80004d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004da:	2301      	movs	r3, #1
 80004dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e2:	2302      	movs	r3, #2
 80004e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	4619      	mov	r1, r3
 80004ec:	4810      	ldr	r0, [pc, #64]	; (8000530 <MX_GPIO_Init+0xd8>)
 80004ee:	f000 fea1 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004f2:	2310      	movs	r3, #16
 80004f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	480a      	ldr	r0, [pc, #40]	; (8000530 <MX_GPIO_Init+0xd8>)
 8000506:	f000 fe95 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800050a:	2320      	movs	r3, #32
 800050c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MX_GPIO_Init+0xdc>)
 8000510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	4619      	mov	r1, r3
 800051c:	4804      	ldr	r0, [pc, #16]	; (8000530 <MX_GPIO_Init+0xd8>)
 800051e:	f000 fe89 	bl	8001234 <HAL_GPIO_Init>

}
 8000522:	bf00      	nop
 8000524:	3720      	adds	r7, #32
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000
 8000530:	40010c00 	.word	0x40010c00
 8000534:	10110000 	.word	0x10110000

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
}
 800053e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000540:	e7fe      	b.n	8000540 <Error_Handler+0x8>
	...

08000544 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_MspInit+0x40>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a0d      	ldr	r2, [pc, #52]	; (8000584 <HAL_MspInit+0x40>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6193      	str	r3, [r2, #24]
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <HAL_MspInit+0x40>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <HAL_MspInit+0x40>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a07      	ldr	r2, [pc, #28]	; (8000584 <HAL_MspInit+0x40>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <HAL_MspInit+0x40>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40021000 	.word	0x40021000

08000588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a28      	ldr	r2, [pc, #160]	; (8000644 <HAL_ADC_MspInit+0xbc>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d149      	bne.n	800063c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005a8:	4b27      	ldr	r3, [pc, #156]	; (8000648 <HAL_ADC_MspInit+0xc0>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a26      	ldr	r2, [pc, #152]	; (8000648 <HAL_ADC_MspInit+0xc0>)
 80005ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b24      	ldr	r3, [pc, #144]	; (8000648 <HAL_ADC_MspInit+0xc0>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c0:	4b21      	ldr	r3, [pc, #132]	; (8000648 <HAL_ADC_MspInit+0xc0>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a20      	ldr	r2, [pc, #128]	; (8000648 <HAL_ADC_MspInit+0xc0>)
 80005c6:	f043 0304 	orr.w	r3, r3, #4
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <HAL_ADC_MspInit+0xc0>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0304 	and.w	r3, r3, #4
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80005d8:	230e      	movs	r3, #14
 80005da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005dc:	2303      	movs	r3, #3
 80005de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	4619      	mov	r1, r3
 80005e6:	4819      	ldr	r0, [pc, #100]	; (800064c <HAL_ADC_MspInit+0xc4>)
 80005e8:	f000 fe24 	bl	8001234 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <HAL_ADC_MspInit+0xc8>)
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <HAL_ADC_MspInit+0xcc>)
 80005f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <HAL_ADC_MspInit+0xc8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <HAL_ADC_MspInit+0xc8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <HAL_ADC_MspInit+0xc8>)
 8000600:	2280      	movs	r2, #128	; 0x80
 8000602:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_ADC_MspInit+0xc8>)
 8000606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800060a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <HAL_ADC_MspInit+0xc8>)
 800060e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000612:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <HAL_ADC_MspInit+0xc8>)
 8000616:	2220      	movs	r2, #32
 8000618:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <HAL_ADC_MspInit+0xc8>)
 800061c:	2200      	movs	r2, #0
 800061e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000620:	480b      	ldr	r0, [pc, #44]	; (8000650 <HAL_ADC_MspInit+0xc8>)
 8000622:	f000 fca7 	bl	8000f74 <HAL_DMA_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800062c:	f7ff ff84 	bl	8000538 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a07      	ldr	r2, [pc, #28]	; (8000650 <HAL_ADC_MspInit+0xc8>)
 8000634:	621a      	str	r2, [r3, #32]
 8000636:	4a06      	ldr	r2, [pc, #24]	; (8000650 <HAL_ADC_MspInit+0xc8>)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800063c:	bf00      	nop
 800063e:	3720      	adds	r7, #32
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40012400 	.word	0x40012400
 8000648:	40021000 	.word	0x40021000
 800064c:	40010800 	.word	0x40010800
 8000650:	20000058 	.word	0x20000058
 8000654:	40020008 	.word	0x40020008

08000658 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0d      	ldr	r2, [pc, #52]	; (800069c <HAL_TIM_Base_MspInit+0x44>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d113      	bne.n	8000692 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <HAL_TIM_Base_MspInit+0x48>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a0c      	ldr	r2, [pc, #48]	; (80006a0 <HAL_TIM_Base_MspInit+0x48>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <HAL_TIM_Base_MspInit+0x48>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 0304 	and.w	r3, r3, #4
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	201e      	movs	r0, #30
 8000688:	f000 fc3d 	bl	8000f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800068c:	201e      	movs	r0, #30
 800068e:	f000 fc56 	bl	8000f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40000800 	.word	0x40000800
 80006a0:	40021000 	.word	0x40021000

080006a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a0f      	ldr	r2, [pc, #60]	; (80006fc <HAL_TIM_MspPostInit+0x58>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d117      	bne.n	80006f4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <HAL_TIM_MspPostInit+0x5c>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <HAL_TIM_MspPostInit+0x5c>)
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <HAL_TIM_MspPostInit+0x5c>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f003 0308 	and.w	r3, r3, #8
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006dc:	23c0      	movs	r3, #192	; 0xc0
 80006de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	4619      	mov	r1, r3
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <HAL_TIM_MspPostInit+0x60>)
 80006f0:	f000 fda0 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40000800 	.word	0x40000800
 8000700:	40021000 	.word	0x40021000
 8000704:	40010c00 	.word	0x40010c00

08000708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <HAL_UART_MspInit+0x8c>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d131      	bne.n	800078c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <HAL_UART_MspInit+0x90>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a1a      	ldr	r2, [pc, #104]	; (8000798 <HAL_UART_MspInit+0x90>)
 800072e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <HAL_UART_MspInit+0x90>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_UART_MspInit+0x90>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a14      	ldr	r2, [pc, #80]	; (8000798 <HAL_UART_MspInit+0x90>)
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_UART_MspInit+0x90>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0304 	and.w	r3, r3, #4
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800075c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000762:	2303      	movs	r3, #3
 8000764:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	4619      	mov	r1, r3
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <HAL_UART_MspInit+0x94>)
 800076e:	f000 fd61 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000776:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	4619      	mov	r1, r3
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <HAL_UART_MspInit+0x94>)
 8000788:	f000 fd54 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800078c:	bf00      	nop
 800078e:	3720      	adds	r7, #32
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40013800 	.word	0x40013800
 8000798:	40021000 	.word	0x40021000
 800079c:	40010800 	.word	0x40010800

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x4>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <MemManage_Handler+0x4>

080007b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler+0x4>

080007be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr

080007d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr

080007e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e6:	f000 f889 	bl	80008fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <DMA1_Channel1_IRQHandler+0x10>)
 80007f6:	f000 fc17 	bl	8001028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000058 	.word	0x20000058

08000804 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <TIM4_IRQHandler+0x10>)
 800080a:	f001 fc26 	bl	800205a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000009c 	.word	0x2000009c

08000818 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000826:	490d      	ldr	r1, [pc, #52]	; (800085c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000828:	4a0d      	ldr	r2, [pc, #52]	; (8000860 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800083c:	4c0a      	ldr	r4, [pc, #40]	; (8000868 <LoopFillZerobss+0x22>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800084a:	f7ff ffe5 	bl	8000818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800084e:	f002 fa89 	bl	8002d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000852:	f7ff fc7b 	bl	800014c <main>
  bx lr
 8000856:	4770      	bx	lr
  ldr r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800085c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000860:	08002e04 	.word	0x08002e04
  ldr r2, =_sbss
 8000864:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000868:	2000012c 	.word	0x2000012c

0800086c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800086c:	e7fe      	b.n	800086c <ADC1_2_IRQHandler>
	...

08000870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_Init+0x28>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <HAL_Init+0x28>)
 800087a:	f043 0310 	orr.w	r3, r3, #16
 800087e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000880:	2003      	movs	r0, #3
 8000882:	f000 fb35 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000886:	200f      	movs	r0, #15
 8000888:	f000 f808 	bl	800089c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800088c:	f7ff fe5a 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40022000 	.word	0x40022000

0800089c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_InitTick+0x54>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_InitTick+0x58>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fb4d 	bl	8000f5a <HAL_SYSTICK_Config>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00e      	b.n	80008e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b0f      	cmp	r3, #15
 80008ce:	d80a      	bhi.n	80008e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d0:	2200      	movs	r2, #0
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008d8:	f000 fb15 	bl	8000f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <HAL_InitTick+0x5c>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e000      	b.n	80008e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000004 	.word	0x20000004

080008fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_IncTick+0x1c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_IncTick+0x20>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4413      	add	r3, r2
 800090c:	4a03      	ldr	r2, [pc, #12]	; (800091c <HAL_IncTick+0x20>)
 800090e:	6013      	str	r3, [r2, #0]
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	20000008 	.word	0x20000008
 800091c:	20000128 	.word	0x20000128

08000920 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return uwTick;
 8000924:	4b02      	ldr	r3, [pc, #8]	; (8000930 <HAL_GetTick+0x10>)
 8000926:	681b      	ldr	r3, [r3, #0]
}
 8000928:	4618      	mov	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000128 	.word	0x20000128

08000934 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800093c:	2300      	movs	r3, #0
 800093e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d101      	bne.n	8000956 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	e0be      	b.n	8000ad4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000960:	2b00      	cmp	r3, #0
 8000962:	d109      	bne.n	8000978 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff fe08 	bl	8000588 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f000 f9ab 	bl	8000cd4 <ADC_ConversionStop_Disable>
 800097e:	4603      	mov	r3, r0
 8000980:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000986:	f003 0310 	and.w	r3, r3, #16
 800098a:	2b00      	cmp	r3, #0
 800098c:	f040 8099 	bne.w	8000ac2 <HAL_ADC_Init+0x18e>
 8000990:	7dfb      	ldrb	r3, [r7, #23]
 8000992:	2b00      	cmp	r3, #0
 8000994:	f040 8095 	bne.w	8000ac2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009a0:	f023 0302 	bic.w	r3, r3, #2
 80009a4:	f043 0202 	orr.w	r2, r3, #2
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	7b1b      	ldrb	r3, [r3, #12]
 80009ba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009cc:	d003      	beq.n	80009d6 <HAL_ADC_Init+0xa2>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d102      	bne.n	80009dc <HAL_ADC_Init+0xa8>
 80009d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009da:	e000      	b.n	80009de <HAL_ADC_Init+0xaa>
 80009dc:	2300      	movs	r3, #0
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	7d1b      	ldrb	r3, [r3, #20]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d119      	bne.n	8000a20 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	7b1b      	ldrb	r3, [r3, #12]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d109      	bne.n	8000a08 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	3b01      	subs	r3, #1
 80009fa:	035a      	lsls	r2, r3, #13
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	e00b      	b.n	8000a20 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0c:	f043 0220 	orr.w	r2, r3, #32
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a18:	f043 0201 	orr.w	r2, r3, #1
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	430a      	orrs	r2, r1
 8000a32:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	689a      	ldr	r2, [r3, #8]
 8000a3a:	4b28      	ldr	r3, [pc, #160]	; (8000adc <HAL_ADC_Init+0x1a8>)
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	6812      	ldr	r2, [r2, #0]
 8000a42:	68b9      	ldr	r1, [r7, #8]
 8000a44:	430b      	orrs	r3, r1
 8000a46:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a50:	d003      	beq.n	8000a5a <HAL_ADC_Init+0x126>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d104      	bne.n	8000a64 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	691b      	ldr	r3, [r3, #16]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	051b      	lsls	r3, r3, #20
 8000a62:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a6a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	430a      	orrs	r2, r1
 8000a76:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_ADC_Init+0x1ac>)
 8000a80:	4013      	ands	r3, r2
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d10b      	bne.n	8000aa0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a92:	f023 0303 	bic.w	r3, r3, #3
 8000a96:	f043 0201 	orr.w	r2, r3, #1
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a9e:	e018      	b.n	8000ad2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa4:	f023 0312 	bic.w	r3, r3, #18
 8000aa8:	f043 0210 	orr.w	r2, r3, #16
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab4:	f043 0201 	orr.w	r2, r3, #1
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ac0:	e007      	b.n	8000ad2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac6:	f043 0210 	orr.w	r2, r3, #16
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	ffe1f7fd 	.word	0xffe1f7fd
 8000ae0:	ff1f0efe 	.word	0xff1f0efe

08000ae4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d101      	bne.n	8000b04 <HAL_ADC_ConfigChannel+0x20>
 8000b00:	2302      	movs	r3, #2
 8000b02:	e0dc      	b.n	8000cbe <HAL_ADC_ConfigChannel+0x1da>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2201      	movs	r2, #1
 8000b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2b06      	cmp	r3, #6
 8000b12:	d81c      	bhi.n	8000b4e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	3b05      	subs	r3, #5
 8000b26:	221f      	movs	r2, #31
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	4019      	ands	r1, r3
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	6818      	ldr	r0, [r3, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	3b05      	subs	r3, #5
 8000b40:	fa00 f203 	lsl.w	r2, r0, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000b4c:	e03c      	b.n	8000bc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	2b0c      	cmp	r3, #12
 8000b54:	d81c      	bhi.n	8000b90 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	4613      	mov	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	3b23      	subs	r3, #35	; 0x23
 8000b68:	221f      	movs	r2, #31
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	4019      	ands	r1, r3
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	6818      	ldr	r0, [r3, #0]
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	4413      	add	r3, r2
 8000b80:	3b23      	subs	r3, #35	; 0x23
 8000b82:	fa00 f203 	lsl.w	r2, r0, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8000b8e:	e01b      	b.n	8000bc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	4413      	add	r3, r2
 8000ba0:	3b41      	subs	r3, #65	; 0x41
 8000ba2:	221f      	movs	r2, #31
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	4019      	ands	r1, r3
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	4413      	add	r3, r2
 8000bba:	3b41      	subs	r3, #65	; 0x41
 8000bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b09      	cmp	r3, #9
 8000bce:	d91c      	bls.n	8000c0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	68d9      	ldr	r1, [r3, #12]
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	4413      	add	r3, r2
 8000be0:	3b1e      	subs	r3, #30
 8000be2:	2207      	movs	r2, #7
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	4019      	ands	r1, r3
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	6898      	ldr	r0, [r3, #8]
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	4413      	add	r3, r2
 8000bfa:	3b1e      	subs	r3, #30
 8000bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	430a      	orrs	r2, r1
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	e019      	b.n	8000c3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	6919      	ldr	r1, [r3, #16]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4613      	mov	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	4413      	add	r3, r2
 8000c1a:	2207      	movs	r2, #7
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	4019      	ands	r1, r3
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	6898      	ldr	r0, [r3, #8]
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	4413      	add	r3, r2
 8000c32:	fa00 f203 	lsl.w	r2, r0, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b10      	cmp	r3, #16
 8000c44:	d003      	beq.n	8000c4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c4a:	2b11      	cmp	r3, #17
 8000c4c:	d132      	bne.n	8000cb4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a1d      	ldr	r2, [pc, #116]	; (8000cc8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d125      	bne.n	8000ca4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d126      	bne.n	8000cb4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000c74:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b10      	cmp	r3, #16
 8000c7c:	d11a      	bne.n	8000cb4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <HAL_ADC_ConfigChannel+0x1e8>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000c84:	fba2 2303 	umull	r2, r3, r2, r3
 8000c88:	0c9a      	lsrs	r2, r3, #18
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c94:	e002      	b.n	8000c9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f9      	bne.n	8000c96 <HAL_ADC_ConfigChannel+0x1b2>
 8000ca2:	e007      	b.n	8000cb4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca8:	f043 0220 	orr.w	r2, r3, #32
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	40012400 	.word	0x40012400
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	431bde83 	.word	0x431bde83

08000cd4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d12e      	bne.n	8000d4c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f022 0201 	bic.w	r2, r2, #1
 8000cfc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000cfe:	f7ff fe0f 	bl	8000920 <HAL_GetTick>
 8000d02:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d04:	e01b      	b.n	8000d3e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d06:	f7ff fe0b 	bl	8000920 <HAL_GetTick>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d914      	bls.n	8000d3e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d10d      	bne.n	8000d3e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d26:	f043 0210 	orr.w	r2, r3, #16
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d32:	f043 0201 	orr.w	r2, r3, #1
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e007      	b.n	8000d4e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d0dc      	beq.n	8000d06 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4906      	ldr	r1, [pc, #24]	; (8000df0 <__NVIC_EnableIRQ+0x34>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	; (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	; (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	; 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ebc:	d301      	bcc.n	8000ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <SysTick_Config+0x40>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ed0:	f7ff ff90 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <SysTick_Config+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <SysTick_Config+0x40>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff2d 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff42 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff90 	bl	8000e48 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5f 	bl	8000df4 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff35 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffa2 	bl	8000eac <SysTick_Config>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e043      	b.n	8001012 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <HAL_DMA_Init+0xa8>)
 8000f92:	4413      	add	r3, r2
 8000f94:	4a22      	ldr	r2, [pc, #136]	; (8001020 <HAL_DMA_Init+0xac>)
 8000f96:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9a:	091b      	lsrs	r3, r3, #4
 8000f9c:	009a      	lsls	r2, r3, #2
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a1f      	ldr	r2, [pc, #124]	; (8001024 <HAL_DMA_Init+0xb0>)
 8000fa6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2202      	movs	r2, #2
 8000fac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000fbe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	bffdfff8 	.word	0xbffdfff8
 8001020:	cccccccd 	.word	0xcccccccd
 8001024:	40020000 	.word	0x40020000

08001028 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	2204      	movs	r2, #4
 8001046:	409a      	lsls	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4013      	ands	r3, r2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d04f      	beq.n	80010f0 <HAL_DMA_IRQHandler+0xc8>
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	2b00      	cmp	r3, #0
 8001058:	d04a      	beq.n	80010f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0320 	and.w	r3, r3, #32
 8001064:	2b00      	cmp	r3, #0
 8001066:	d107      	bne.n	8001078 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 0204 	bic.w	r2, r2, #4
 8001076:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a66      	ldr	r2, [pc, #408]	; (8001218 <HAL_DMA_IRQHandler+0x1f0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d029      	beq.n	80010d6 <HAL_DMA_IRQHandler+0xae>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a65      	ldr	r2, [pc, #404]	; (800121c <HAL_DMA_IRQHandler+0x1f4>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d022      	beq.n	80010d2 <HAL_DMA_IRQHandler+0xaa>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a63      	ldr	r2, [pc, #396]	; (8001220 <HAL_DMA_IRQHandler+0x1f8>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d01a      	beq.n	80010cc <HAL_DMA_IRQHandler+0xa4>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a62      	ldr	r2, [pc, #392]	; (8001224 <HAL_DMA_IRQHandler+0x1fc>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d012      	beq.n	80010c6 <HAL_DMA_IRQHandler+0x9e>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a60      	ldr	r2, [pc, #384]	; (8001228 <HAL_DMA_IRQHandler+0x200>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d00a      	beq.n	80010c0 <HAL_DMA_IRQHandler+0x98>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a5f      	ldr	r2, [pc, #380]	; (800122c <HAL_DMA_IRQHandler+0x204>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d102      	bne.n	80010ba <HAL_DMA_IRQHandler+0x92>
 80010b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010b8:	e00e      	b.n	80010d8 <HAL_DMA_IRQHandler+0xb0>
 80010ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010be:	e00b      	b.n	80010d8 <HAL_DMA_IRQHandler+0xb0>
 80010c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010c4:	e008      	b.n	80010d8 <HAL_DMA_IRQHandler+0xb0>
 80010c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010ca:	e005      	b.n	80010d8 <HAL_DMA_IRQHandler+0xb0>
 80010cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d0:	e002      	b.n	80010d8 <HAL_DMA_IRQHandler+0xb0>
 80010d2:	2340      	movs	r3, #64	; 0x40
 80010d4:	e000      	b.n	80010d8 <HAL_DMA_IRQHandler+0xb0>
 80010d6:	2304      	movs	r3, #4
 80010d8:	4a55      	ldr	r2, [pc, #340]	; (8001230 <HAL_DMA_IRQHandler+0x208>)
 80010da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 8094 	beq.w	800120e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010ee:	e08e      	b.n	800120e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	2202      	movs	r2, #2
 80010f6:	409a      	lsls	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d056      	beq.n	80011ae <HAL_DMA_IRQHandler+0x186>
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d051      	beq.n	80011ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0320 	and.w	r3, r3, #32
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10b      	bne.n	8001130 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 020a 	bic.w	r2, r2, #10
 8001126:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a38      	ldr	r2, [pc, #224]	; (8001218 <HAL_DMA_IRQHandler+0x1f0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d029      	beq.n	800118e <HAL_DMA_IRQHandler+0x166>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a37      	ldr	r2, [pc, #220]	; (800121c <HAL_DMA_IRQHandler+0x1f4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d022      	beq.n	800118a <HAL_DMA_IRQHandler+0x162>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a35      	ldr	r2, [pc, #212]	; (8001220 <HAL_DMA_IRQHandler+0x1f8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d01a      	beq.n	8001184 <HAL_DMA_IRQHandler+0x15c>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a34      	ldr	r2, [pc, #208]	; (8001224 <HAL_DMA_IRQHandler+0x1fc>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d012      	beq.n	800117e <HAL_DMA_IRQHandler+0x156>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a32      	ldr	r2, [pc, #200]	; (8001228 <HAL_DMA_IRQHandler+0x200>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d00a      	beq.n	8001178 <HAL_DMA_IRQHandler+0x150>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a31      	ldr	r2, [pc, #196]	; (800122c <HAL_DMA_IRQHandler+0x204>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d102      	bne.n	8001172 <HAL_DMA_IRQHandler+0x14a>
 800116c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001170:	e00e      	b.n	8001190 <HAL_DMA_IRQHandler+0x168>
 8001172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001176:	e00b      	b.n	8001190 <HAL_DMA_IRQHandler+0x168>
 8001178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800117c:	e008      	b.n	8001190 <HAL_DMA_IRQHandler+0x168>
 800117e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001182:	e005      	b.n	8001190 <HAL_DMA_IRQHandler+0x168>
 8001184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001188:	e002      	b.n	8001190 <HAL_DMA_IRQHandler+0x168>
 800118a:	2320      	movs	r3, #32
 800118c:	e000      	b.n	8001190 <HAL_DMA_IRQHandler+0x168>
 800118e:	2302      	movs	r3, #2
 8001190:	4a27      	ldr	r2, [pc, #156]	; (8001230 <HAL_DMA_IRQHandler+0x208>)
 8001192:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d034      	beq.n	800120e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80011ac:	e02f      	b.n	800120e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	2208      	movs	r2, #8
 80011b4:	409a      	lsls	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d028      	beq.n	8001210 <HAL_DMA_IRQHandler+0x1e8>
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d023      	beq.n	8001210 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 020e 	bic.w	r2, r2, #14
 80011d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e0:	2101      	movs	r1, #1
 80011e2:	fa01 f202 	lsl.w	r2, r1, r2
 80011e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	2b00      	cmp	r3, #0
 8001204:	d004      	beq.n	8001210 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	4798      	blx	r3
    }
  }
  return;
 800120e:	bf00      	nop
 8001210:	bf00      	nop
}
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40020008 	.word	0x40020008
 800121c:	4002001c 	.word	0x4002001c
 8001220:	40020030 	.word	0x40020030
 8001224:	40020044 	.word	0x40020044
 8001228:	40020058 	.word	0x40020058
 800122c:	4002006c 	.word	0x4002006c
 8001230:	40020000 	.word	0x40020000

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b08b      	sub	sp, #44	; 0x2c
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001246:	e169      	b.n	800151c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001248:	2201      	movs	r2, #1
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	429a      	cmp	r2, r3
 8001262:	f040 8158 	bne.w	8001516 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4a9a      	ldr	r2, [pc, #616]	; (80014d4 <HAL_GPIO_Init+0x2a0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d05e      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 8001270:	4a98      	ldr	r2, [pc, #608]	; (80014d4 <HAL_GPIO_Init+0x2a0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d875      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 8001276:	4a98      	ldr	r2, [pc, #608]	; (80014d8 <HAL_GPIO_Init+0x2a4>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d058      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 800127c:	4a96      	ldr	r2, [pc, #600]	; (80014d8 <HAL_GPIO_Init+0x2a4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d86f      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 8001282:	4a96      	ldr	r2, [pc, #600]	; (80014dc <HAL_GPIO_Init+0x2a8>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d052      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 8001288:	4a94      	ldr	r2, [pc, #592]	; (80014dc <HAL_GPIO_Init+0x2a8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d869      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 800128e:	4a94      	ldr	r2, [pc, #592]	; (80014e0 <HAL_GPIO_Init+0x2ac>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d04c      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 8001294:	4a92      	ldr	r2, [pc, #584]	; (80014e0 <HAL_GPIO_Init+0x2ac>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d863      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 800129a:	4a92      	ldr	r2, [pc, #584]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d046      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 80012a0:	4a90      	ldr	r2, [pc, #576]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d85d      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 80012a6:	2b12      	cmp	r3, #18
 80012a8:	d82a      	bhi.n	8001300 <HAL_GPIO_Init+0xcc>
 80012aa:	2b12      	cmp	r3, #18
 80012ac:	d859      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 80012ae:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <HAL_GPIO_Init+0x80>)
 80012b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b4:	0800132f 	.word	0x0800132f
 80012b8:	08001309 	.word	0x08001309
 80012bc:	0800131b 	.word	0x0800131b
 80012c0:	0800135d 	.word	0x0800135d
 80012c4:	08001363 	.word	0x08001363
 80012c8:	08001363 	.word	0x08001363
 80012cc:	08001363 	.word	0x08001363
 80012d0:	08001363 	.word	0x08001363
 80012d4:	08001363 	.word	0x08001363
 80012d8:	08001363 	.word	0x08001363
 80012dc:	08001363 	.word	0x08001363
 80012e0:	08001363 	.word	0x08001363
 80012e4:	08001363 	.word	0x08001363
 80012e8:	08001363 	.word	0x08001363
 80012ec:	08001363 	.word	0x08001363
 80012f0:	08001363 	.word	0x08001363
 80012f4:	08001363 	.word	0x08001363
 80012f8:	08001311 	.word	0x08001311
 80012fc:	08001325 	.word	0x08001325
 8001300:	4a79      	ldr	r2, [pc, #484]	; (80014e8 <HAL_GPIO_Init+0x2b4>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d013      	beq.n	800132e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001306:	e02c      	b.n	8001362 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	623b      	str	r3, [r7, #32]
          break;
 800130e:	e029      	b.n	8001364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	3304      	adds	r3, #4
 8001316:	623b      	str	r3, [r7, #32]
          break;
 8001318:	e024      	b.n	8001364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	3308      	adds	r3, #8
 8001320:	623b      	str	r3, [r7, #32]
          break;
 8001322:	e01f      	b.n	8001364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	330c      	adds	r3, #12
 800132a:	623b      	str	r3, [r7, #32]
          break;
 800132c:	e01a      	b.n	8001364 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d102      	bne.n	800133c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001336:	2304      	movs	r3, #4
 8001338:	623b      	str	r3, [r7, #32]
          break;
 800133a:	e013      	b.n	8001364 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d105      	bne.n	8001350 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001344:	2308      	movs	r3, #8
 8001346:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69fa      	ldr	r2, [r7, #28]
 800134c:	611a      	str	r2, [r3, #16]
          break;
 800134e:	e009      	b.n	8001364 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001350:	2308      	movs	r3, #8
 8001352:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	615a      	str	r2, [r3, #20]
          break;
 800135a:	e003      	b.n	8001364 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
          break;
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x130>
          break;
 8001362:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2bff      	cmp	r3, #255	; 0xff
 8001368:	d801      	bhi.n	800136e <HAL_GPIO_Init+0x13a>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	e001      	b.n	8001372 <HAL_GPIO_Init+0x13e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3304      	adds	r3, #4
 8001372:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2bff      	cmp	r3, #255	; 0xff
 8001378:	d802      	bhi.n	8001380 <HAL_GPIO_Init+0x14c>
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	e002      	b.n	8001386 <HAL_GPIO_Init+0x152>
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	3b08      	subs	r3, #8
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	210f      	movs	r1, #15
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	401a      	ands	r2, r3
 8001398:	6a39      	ldr	r1, [r7, #32]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	431a      	orrs	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 80b1 	beq.w	8001516 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013b4:	4b4d      	ldr	r3, [pc, #308]	; (80014ec <HAL_GPIO_Init+0x2b8>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a4c      	ldr	r2, [pc, #304]	; (80014ec <HAL_GPIO_Init+0x2b8>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b4a      	ldr	r3, [pc, #296]	; (80014ec <HAL_GPIO_Init+0x2b8>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013cc:	4a48      	ldr	r2, [pc, #288]	; (80014f0 <HAL_GPIO_Init+0x2bc>)
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a40      	ldr	r2, [pc, #256]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d013      	beq.n	8001420 <HAL_GPIO_Init+0x1ec>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a3f      	ldr	r2, [pc, #252]	; (80014f8 <HAL_GPIO_Init+0x2c4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d00d      	beq.n	800141c <HAL_GPIO_Init+0x1e8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a3e      	ldr	r2, [pc, #248]	; (80014fc <HAL_GPIO_Init+0x2c8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d007      	beq.n	8001418 <HAL_GPIO_Init+0x1e4>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a3d      	ldr	r2, [pc, #244]	; (8001500 <HAL_GPIO_Init+0x2cc>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d101      	bne.n	8001414 <HAL_GPIO_Init+0x1e0>
 8001410:	2303      	movs	r3, #3
 8001412:	e006      	b.n	8001422 <HAL_GPIO_Init+0x1ee>
 8001414:	2304      	movs	r3, #4
 8001416:	e004      	b.n	8001422 <HAL_GPIO_Init+0x1ee>
 8001418:	2302      	movs	r3, #2
 800141a:	e002      	b.n	8001422 <HAL_GPIO_Init+0x1ee>
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <HAL_GPIO_Init+0x1ee>
 8001420:	2300      	movs	r3, #0
 8001422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001424:	f002 0203 	and.w	r2, r2, #3
 8001428:	0092      	lsls	r2, r2, #2
 800142a:	4093      	lsls	r3, r2
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001432:	492f      	ldr	r1, [pc, #188]	; (80014f0 <HAL_GPIO_Init+0x2bc>)
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3302      	adds	r3, #2
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d006      	beq.n	800145a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	492c      	ldr	r1, [pc, #176]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800145a:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	43db      	mvns	r3, r3
 8001462:	4928      	ldr	r1, [pc, #160]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 8001464:	4013      	ands	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001474:	4b23      	ldr	r3, [pc, #140]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	4922      	ldr	r1, [pc, #136]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	43db      	mvns	r3, r3
 800148a:	491e      	ldr	r1, [pc, #120]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 800148c:	4013      	ands	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d006      	beq.n	80014aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	4918      	ldr	r1, [pc, #96]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	608b      	str	r3, [r1, #8]
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	4914      	ldr	r1, [pc, #80]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d021      	beq.n	8001508 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	490e      	ldr	r1, [pc, #56]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	60cb      	str	r3, [r1, #12]
 80014d0:	e021      	b.n	8001516 <HAL_GPIO_Init+0x2e2>
 80014d2:	bf00      	nop
 80014d4:	10320000 	.word	0x10320000
 80014d8:	10310000 	.word	0x10310000
 80014dc:	10220000 	.word	0x10220000
 80014e0:	10210000 	.word	0x10210000
 80014e4:	10120000 	.word	0x10120000
 80014e8:	10110000 	.word	0x10110000
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010000 	.word	0x40010000
 80014f4:	40010800 	.word	0x40010800
 80014f8:	40010c00 	.word	0x40010c00
 80014fc:	40011000 	.word	0x40011000
 8001500:	40011400 	.word	0x40011400
 8001504:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_GPIO_Init+0x304>)
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	43db      	mvns	r3, r3
 8001510:	4909      	ldr	r1, [pc, #36]	; (8001538 <HAL_GPIO_Init+0x304>)
 8001512:	4013      	ands	r3, r2
 8001514:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	3301      	adds	r3, #1
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	f47f ae8e 	bne.w	8001248 <HAL_GPIO_Init+0x14>
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	372c      	adds	r7, #44	; 0x2c
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	40010400 	.word	0x40010400

0800153c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
 8001548:	4613      	mov	r3, r2
 800154a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800154c:	787b      	ldrb	r3, [r7, #1]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001552:	887a      	ldrh	r2, [r7, #2]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001558:	e003      	b.n	8001562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	041a      	lsls	r2, r3, #16
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	611a      	str	r2, [r3, #16]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e272      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 8087 	beq.w	800169a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800158c:	4b92      	ldr	r3, [pc, #584]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 030c 	and.w	r3, r3, #12
 8001594:	2b04      	cmp	r3, #4
 8001596:	d00c      	beq.n	80015b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001598:	4b8f      	ldr	r3, [pc, #572]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 030c 	and.w	r3, r3, #12
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d112      	bne.n	80015ca <HAL_RCC_OscConfig+0x5e>
 80015a4:	4b8c      	ldr	r3, [pc, #560]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b0:	d10b      	bne.n	80015ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b2:	4b89      	ldr	r3, [pc, #548]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d06c      	beq.n	8001698 <HAL_RCC_OscConfig+0x12c>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d168      	bne.n	8001698 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e24c      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x76>
 80015d4:	4b80      	ldr	r3, [pc, #512]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a7f      	ldr	r2, [pc, #508]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80015da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	e02e      	b.n	8001640 <HAL_RCC_OscConfig+0xd4>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x98>
 80015ea:	4b7b      	ldr	r3, [pc, #492]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a7a      	ldr	r2, [pc, #488]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	4b78      	ldr	r3, [pc, #480]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a77      	ldr	r2, [pc, #476]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e01d      	b.n	8001640 <HAL_RCC_OscConfig+0xd4>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0xbc>
 800160e:	4b72      	ldr	r3, [pc, #456]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a71      	ldr	r2, [pc, #452]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 8001614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b6f      	ldr	r3, [pc, #444]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a6e      	ldr	r2, [pc, #440]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e00b      	b.n	8001640 <HAL_RCC_OscConfig+0xd4>
 8001628:	4b6b      	ldr	r3, [pc, #428]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a6a      	ldr	r2, [pc, #424]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 800162e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b68      	ldr	r3, [pc, #416]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a67      	ldr	r2, [pc, #412]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 800163a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d013      	beq.n	8001670 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff f96a 	bl	8000920 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff f966 	bl	8000920 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e200      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	4b5d      	ldr	r3, [pc, #372]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f0      	beq.n	8001650 <HAL_RCC_OscConfig+0xe4>
 800166e:	e014      	b.n	800169a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff f956 	bl	8000920 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff f952 	bl	8000920 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e1ec      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168a:	4b53      	ldr	r3, [pc, #332]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x10c>
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d063      	beq.n	800176e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016a6:	4b4c      	ldr	r3, [pc, #304]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00b      	beq.n	80016ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016b2:	4b49      	ldr	r3, [pc, #292]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b08      	cmp	r3, #8
 80016bc:	d11c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x18c>
 80016be:	4b46      	ldr	r3, [pc, #280]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d116      	bne.n	80016f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ca:	4b43      	ldr	r3, [pc, #268]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <HAL_RCC_OscConfig+0x176>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e1c0      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e2:	4b3d      	ldr	r3, [pc, #244]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4939      	ldr	r1, [pc, #228]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f6:	e03a      	b.n	800176e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d020      	beq.n	8001742 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001700:	4b36      	ldr	r3, [pc, #216]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff f90b 	bl	8000920 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170e:	f7ff f907 	bl	8000920 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e1a1      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001720:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4927      	ldr	r1, [pc, #156]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
 8001740:	e015      	b.n	800176e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001742:	4b26      	ldr	r3, [pc, #152]	; (80017dc <HAL_RCC_OscConfig+0x270>)
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff f8ea 	bl	8000920 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001750:	f7ff f8e6 	bl	8000920 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e180      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d03a      	beq.n	80017f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d019      	beq.n	80017b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_RCC_OscConfig+0x274>)
 8001784:	2201      	movs	r2, #1
 8001786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001788:	f7ff f8ca 	bl	8000920 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff f8c6 	bl	8000920 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e160      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017ae:	2001      	movs	r0, #1
 80017b0:	f000 fad8 	bl	8001d64 <RCC_Delay>
 80017b4:	e01c      	b.n	80017f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <HAL_RCC_OscConfig+0x274>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017bc:	f7ff f8b0 	bl	8000920 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c2:	e00f      	b.n	80017e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c4:	f7ff f8ac 	bl	8000920 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d908      	bls.n	80017e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e146      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000
 80017dc:	42420000 	.word	0x42420000
 80017e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e4:	4b92      	ldr	r3, [pc, #584]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1e9      	bne.n	80017c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80a6 	beq.w	800194a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001802:	4b8b      	ldr	r3, [pc, #556]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10d      	bne.n	800182a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	4b88      	ldr	r3, [pc, #544]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	4a87      	ldr	r2, [pc, #540]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	61d3      	str	r3, [r2, #28]
 800181a:	4b85      	ldr	r3, [pc, #532]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001826:	2301      	movs	r3, #1
 8001828:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182a:	4b82      	ldr	r3, [pc, #520]	; (8001a34 <HAL_RCC_OscConfig+0x4c8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001832:	2b00      	cmp	r3, #0
 8001834:	d118      	bne.n	8001868 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001836:	4b7f      	ldr	r3, [pc, #508]	; (8001a34 <HAL_RCC_OscConfig+0x4c8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a7e      	ldr	r2, [pc, #504]	; (8001a34 <HAL_RCC_OscConfig+0x4c8>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001840:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001842:	f7ff f86d 	bl	8000920 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184a:	f7ff f869 	bl	8000920 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b64      	cmp	r3, #100	; 0x64
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e103      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185c:	4b75      	ldr	r3, [pc, #468]	; (8001a34 <HAL_RCC_OscConfig+0x4c8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d106      	bne.n	800187e <HAL_RCC_OscConfig+0x312>
 8001870:	4b6f      	ldr	r3, [pc, #444]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	4a6e      	ldr	r2, [pc, #440]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6213      	str	r3, [r2, #32]
 800187c:	e02d      	b.n	80018da <HAL_RCC_OscConfig+0x36e>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x334>
 8001886:	4b6a      	ldr	r3, [pc, #424]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4a69      	ldr	r2, [pc, #420]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	6213      	str	r3, [r2, #32]
 8001892:	4b67      	ldr	r3, [pc, #412]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	4a66      	ldr	r2, [pc, #408]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	f023 0304 	bic.w	r3, r3, #4
 800189c:	6213      	str	r3, [r2, #32]
 800189e:	e01c      	b.n	80018da <HAL_RCC_OscConfig+0x36e>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	d10c      	bne.n	80018c2 <HAL_RCC_OscConfig+0x356>
 80018a8:	4b61      	ldr	r3, [pc, #388]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4a60      	ldr	r2, [pc, #384]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	f043 0304 	orr.w	r3, r3, #4
 80018b2:	6213      	str	r3, [r2, #32]
 80018b4:	4b5e      	ldr	r3, [pc, #376]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	4a5d      	ldr	r2, [pc, #372]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6213      	str	r3, [r2, #32]
 80018c0:	e00b      	b.n	80018da <HAL_RCC_OscConfig+0x36e>
 80018c2:	4b5b      	ldr	r3, [pc, #364]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4a5a      	ldr	r2, [pc, #360]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	6213      	str	r3, [r2, #32]
 80018ce:	4b58      	ldr	r3, [pc, #352]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	4a57      	ldr	r2, [pc, #348]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	f023 0304 	bic.w	r3, r3, #4
 80018d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d015      	beq.n	800190e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e2:	f7ff f81d 	bl	8000920 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e8:	e00a      	b.n	8001900 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ea:	f7ff f819 	bl	8000920 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e0b1      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001900:	4b4b      	ldr	r3, [pc, #300]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0ee      	beq.n	80018ea <HAL_RCC_OscConfig+0x37e>
 800190c:	e014      	b.n	8001938 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190e:	f7ff f807 	bl	8000920 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001914:	e00a      	b.n	800192c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7ff f803 	bl	8000920 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f241 3288 	movw	r2, #5000	; 0x1388
 8001924:	4293      	cmp	r3, r2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e09b      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192c:	4b40      	ldr	r3, [pc, #256]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1ee      	bne.n	8001916 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001938:	7dfb      	ldrb	r3, [r7, #23]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d105      	bne.n	800194a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800193e:	4b3c      	ldr	r3, [pc, #240]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	4a3b      	ldr	r2, [pc, #236]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001948:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 8087 	beq.w	8001a62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001954:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b08      	cmp	r3, #8
 800195e:	d061      	beq.n	8001a24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d146      	bne.n	80019f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001968:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <HAL_RCC_OscConfig+0x4cc>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196e:	f7fe ffd7 	bl	8000920 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001976:	f7fe ffd3 	bl	8000920 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e06d      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001988:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f0      	bne.n	8001976 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199c:	d108      	bne.n	80019b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800199e:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	4921      	ldr	r1, [pc, #132]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b0:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a19      	ldr	r1, [r3, #32]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	430b      	orrs	r3, r1
 80019c2:	491b      	ldr	r1, [pc, #108]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_RCC_OscConfig+0x4cc>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ce:	f7fe ffa7 	bl	8000920 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d6:	f7fe ffa3 	bl	8000920 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e03d      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x46a>
 80019f4:	e035      	b.n	8001a62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <HAL_RCC_OscConfig+0x4cc>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7fe ff90 	bl	8000920 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a04:	f7fe ff8c 	bl	8000920 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e026      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x498>
 8001a22:	e01e      	b.n	8001a62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d107      	bne.n	8001a3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e019      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40007000 	.word	0x40007000
 8001a38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_RCC_OscConfig+0x500>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d106      	bne.n	8001a5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40021000 	.word	0x40021000

08001a70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0d0      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b6a      	ldr	r3, [pc, #424]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d910      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b67      	ldr	r3, [pc, #412]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 0207 	bic.w	r2, r3, #7
 8001a9a:	4965      	ldr	r1, [pc, #404]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b63      	ldr	r3, [pc, #396]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0b8      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d020      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001acc:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4a58      	ldr	r2, [pc, #352]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ad6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae4:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001aee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af0:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	494d      	ldr	r1, [pc, #308]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d040      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d115      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e07f      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d107      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2e:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d109      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e073      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3e:	4b3d      	ldr	r3, [pc, #244]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e06b      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4e:	4b39      	ldr	r3, [pc, #228]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f023 0203 	bic.w	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4936      	ldr	r1, [pc, #216]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b60:	f7fe fede 	bl	8000920 <HAL_GetTick>
 8001b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b68:	f7fe feda 	bl	8000920 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e053      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 020c 	and.w	r2, r3, #12
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d1eb      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b90:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d210      	bcs.n	8001bc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 0207 	bic.w	r2, r3, #7
 8001ba6:	4922      	ldr	r1, [pc, #136]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e032      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4916      	ldr	r1, [pc, #88]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	490e      	ldr	r1, [pc, #56]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bfe:	f000 f821 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001c02:	4602      	mov	r2, r0
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	490a      	ldr	r1, [pc, #40]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001c10:	5ccb      	ldrb	r3, [r1, r3]
 8001c12:	fa22 f303 	lsr.w	r3, r2, r3
 8001c16:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <HAL_RCC_ClockConfig+0x1cc>)
 8001c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_RCC_ClockConfig+0x1d0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fe3c 	bl	800089c <HAL_InitTick>

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40022000 	.word	0x40022000
 8001c34:	40021000 	.word	0x40021000
 8001c38:	08002de4 	.word	0x08002de4
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c44:	b490      	push	{r4, r7}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c4a:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001c4c:	1d3c      	adds	r4, r7, #4
 8001c4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c54:	f240 2301 	movw	r3, #513	; 0x201
 8001c58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
 8001c62:	2300      	movs	r3, #0
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c6e:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d002      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x40>
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d003      	beq.n	8001c8a <HAL_RCC_GetSysClockFreq+0x46>
 8001c82:	e02b      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c84:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c86:	623b      	str	r3, [r7, #32]
      break;
 8001c88:	e02b      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	0c9b      	lsrs	r3, r3, #18
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3328      	adds	r3, #40	; 0x28
 8001c94:	443b      	add	r3, r7
 8001c96:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c9a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d012      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	0c5b      	lsrs	r3, r3, #17
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	3328      	adds	r3, #40	; 0x28
 8001cb2:	443b      	add	r3, r7
 8001cb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cb8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cbe:	fb03 f202 	mul.w	r2, r3, r2
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cca:	e004      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd0:	fb02 f303 	mul.w	r3, r2, r3
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	623b      	str	r3, [r7, #32]
      break;
 8001cda:	e002      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cde:	623b      	str	r3, [r7, #32]
      break;
 8001ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3728      	adds	r7, #40	; 0x28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc90      	pop	{r4, r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	08002dd4 	.word	0x08002dd4
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	007a1200 	.word	0x007a1200
 8001cfc:	003d0900 	.word	0x003d0900

08001d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d04:	4b02      	ldr	r3, [pc, #8]	; (8001d10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	20000000 	.word	0x20000000

08001d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d18:	f7ff fff2 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4903      	ldr	r1, [pc, #12]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000
 8001d38:	08002df4 	.word	0x08002df4

08001d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d40:	f7ff ffde 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	0adb      	lsrs	r3, r3, #11
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4903      	ldr	r1, [pc, #12]	; (8001d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	08002df4 	.word	0x08002df4

08001d64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <RCC_Delay+0x34>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <RCC_Delay+0x38>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0a5b      	lsrs	r3, r3, #9
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d80:	bf00      	nop
  }
  while (Delay --);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1e5a      	subs	r2, r3, #1
 8001d86:	60fa      	str	r2, [r7, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f9      	bne.n	8001d80 <RCC_Delay+0x1c>
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	10624dd3 	.word	0x10624dd3

08001da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d07d      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc0:	4b4f      	ldr	r3, [pc, #316]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10d      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dcc:	4b4c      	ldr	r3, [pc, #304]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	4a4b      	ldr	r2, [pc, #300]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	61d3      	str	r3, [r2, #28]
 8001dd8:	4b49      	ldr	r3, [pc, #292]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de4:	2301      	movs	r3, #1
 8001de6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de8:	4b46      	ldr	r3, [pc, #280]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d118      	bne.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001df4:	4b43      	ldr	r3, [pc, #268]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a42      	ldr	r2, [pc, #264]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e00:	f7fe fd8e 	bl	8000920 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e06:	e008      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e08:	f7fe fd8a 	bl	8000920 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	; 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e06d      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e26:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d02e      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d027      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e44:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e4e:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e54:	4b2c      	ldr	r3, [pc, #176]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e5a:	4a29      	ldr	r2, [pc, #164]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d014      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7fe fd59 	bl	8000920 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7fe fd55 	bl	8000920 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e036      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0ee      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	4917      	ldr	r1, [pc, #92]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d105      	bne.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	4a13      	ldr	r2, [pc, #76]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	490b      	ldr	r1, [pc, #44]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d008      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	4904      	ldr	r1, [pc, #16]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40007000 	.word	0x40007000
 8001f08:	42420440 	.word	0x42420440

08001f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e041      	b.n	8001fa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d106      	bne.n	8001f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe fb90 	bl	8000658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3304      	adds	r3, #4
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	f000 fb3e 	bl	80025cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e041      	b.n	8002040 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d106      	bne.n	8001fd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f839 	bl	8002048 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4610      	mov	r0, r2
 8001fea:	f000 faef 	bl	80025cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b02      	cmp	r3, #2
 800206e:	d122      	bne.n	80020b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b02      	cmp	r3, #2
 800207c:	d11b      	bne.n	80020b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f06f 0202 	mvn.w	r2, #2
 8002086:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fa79 	bl	8002594 <HAL_TIM_IC_CaptureCallback>
 80020a2:	e005      	b.n	80020b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 fa6c 	bl	8002582 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fa7b 	bl	80025a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d122      	bne.n	800210a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d11b      	bne.n	800210a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f06f 0204 	mvn.w	r2, #4
 80020da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fa4f 	bl	8002594 <HAL_TIM_IC_CaptureCallback>
 80020f6:	e005      	b.n	8002104 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 fa42 	bl	8002582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 fa51 	bl	80025a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b08      	cmp	r3, #8
 8002116:	d122      	bne.n	800215e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b08      	cmp	r3, #8
 8002124:	d11b      	bne.n	800215e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f06f 0208 	mvn.w	r2, #8
 800212e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2204      	movs	r2, #4
 8002134:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fa25 	bl	8002594 <HAL_TIM_IC_CaptureCallback>
 800214a:	e005      	b.n	8002158 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 fa18 	bl	8002582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 fa27 	bl	80025a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b10      	cmp	r3, #16
 800216a:	d122      	bne.n	80021b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	2b10      	cmp	r3, #16
 8002178:	d11b      	bne.n	80021b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f06f 0210 	mvn.w	r2, #16
 8002182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2208      	movs	r2, #8
 8002188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f9fb 	bl	8002594 <HAL_TIM_IC_CaptureCallback>
 800219e:	e005      	b.n	80021ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f9ee 	bl	8002582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f9fd 	bl	80025a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d10e      	bne.n	80021de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d107      	bne.n	80021de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f06f 0201 	mvn.w	r2, #1
 80021d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f9c9 	bl	8002570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e8:	2b80      	cmp	r3, #128	; 0x80
 80021ea:	d10e      	bne.n	800220a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f6:	2b80      	cmp	r3, #128	; 0x80
 80021f8:	d107      	bne.n	800220a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 fcc8 	bl	8002b9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002214:	2b40      	cmp	r3, #64	; 0x40
 8002216:	d10e      	bne.n	8002236 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002222:	2b40      	cmp	r3, #64	; 0x40
 8002224:	d107      	bne.n	8002236 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800222e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f9c1 	bl	80025b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b20      	cmp	r3, #32
 8002242:	d10e      	bne.n	8002262 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	2b20      	cmp	r3, #32
 8002250:	d107      	bne.n	8002262 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f06f 0220 	mvn.w	r2, #32
 800225a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fc93 	bl	8002b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002282:	2302      	movs	r3, #2
 8002284:	e0ac      	b.n	80023e0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b0c      	cmp	r3, #12
 8002292:	f200 809f 	bhi.w	80023d4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002296:	a201      	add	r2, pc, #4	; (adr r2, 800229c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229c:	080022d1 	.word	0x080022d1
 80022a0:	080023d5 	.word	0x080023d5
 80022a4:	080023d5 	.word	0x080023d5
 80022a8:	080023d5 	.word	0x080023d5
 80022ac:	08002311 	.word	0x08002311
 80022b0:	080023d5 	.word	0x080023d5
 80022b4:	080023d5 	.word	0x080023d5
 80022b8:	080023d5 	.word	0x080023d5
 80022bc:	08002353 	.word	0x08002353
 80022c0:	080023d5 	.word	0x080023d5
 80022c4:	080023d5 	.word	0x080023d5
 80022c8:	080023d5 	.word	0x080023d5
 80022cc:	08002393 	.word	0x08002393
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f9da 	bl	8002690 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0208 	orr.w	r2, r2, #8
 80022ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0204 	bic.w	r2, r2, #4
 80022fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6999      	ldr	r1, [r3, #24]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	691a      	ldr	r2, [r3, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	619a      	str	r2, [r3, #24]
      break;
 800230e:	e062      	b.n	80023d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fa20 	bl	800275c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800232a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800233a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6999      	ldr	r1, [r3, #24]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	021a      	lsls	r2, r3, #8
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	619a      	str	r2, [r3, #24]
      break;
 8002350:	e041      	b.n	80023d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fa69 	bl	8002830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	69da      	ldr	r2, [r3, #28]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f042 0208 	orr.w	r2, r2, #8
 800236c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69da      	ldr	r2, [r3, #28]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0204 	bic.w	r2, r2, #4
 800237c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69d9      	ldr	r1, [r3, #28]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	61da      	str	r2, [r3, #28]
      break;
 8002390:	e021      	b.n	80023d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fab3 	bl	8002904 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69da      	ldr	r2, [r3, #28]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69d9      	ldr	r1, [r3, #28]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	021a      	lsls	r2, r3, #8
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	61da      	str	r2, [r3, #28]
      break;
 80023d2:	e000      	b.n	80023d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80023d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_TIM_ConfigClockSource+0x18>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e0b3      	b.n	8002568 <HAL_TIM_ConfigClockSource+0x180>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800241e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002426:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002438:	d03e      	beq.n	80024b8 <HAL_TIM_ConfigClockSource+0xd0>
 800243a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243e:	f200 8087 	bhi.w	8002550 <HAL_TIM_ConfigClockSource+0x168>
 8002442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002446:	f000 8085 	beq.w	8002554 <HAL_TIM_ConfigClockSource+0x16c>
 800244a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244e:	d87f      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x168>
 8002450:	2b70      	cmp	r3, #112	; 0x70
 8002452:	d01a      	beq.n	800248a <HAL_TIM_ConfigClockSource+0xa2>
 8002454:	2b70      	cmp	r3, #112	; 0x70
 8002456:	d87b      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x168>
 8002458:	2b60      	cmp	r3, #96	; 0x60
 800245a:	d050      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0x116>
 800245c:	2b60      	cmp	r3, #96	; 0x60
 800245e:	d877      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x168>
 8002460:	2b50      	cmp	r3, #80	; 0x50
 8002462:	d03c      	beq.n	80024de <HAL_TIM_ConfigClockSource+0xf6>
 8002464:	2b50      	cmp	r3, #80	; 0x50
 8002466:	d873      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x168>
 8002468:	2b40      	cmp	r3, #64	; 0x40
 800246a:	d058      	beq.n	800251e <HAL_TIM_ConfigClockSource+0x136>
 800246c:	2b40      	cmp	r3, #64	; 0x40
 800246e:	d86f      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x168>
 8002470:	2b30      	cmp	r3, #48	; 0x30
 8002472:	d064      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x156>
 8002474:	2b30      	cmp	r3, #48	; 0x30
 8002476:	d86b      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x168>
 8002478:	2b20      	cmp	r3, #32
 800247a:	d060      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x156>
 800247c:	2b20      	cmp	r3, #32
 800247e:	d867      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x168>
 8002480:	2b00      	cmp	r3, #0
 8002482:	d05c      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x156>
 8002484:	2b10      	cmp	r3, #16
 8002486:	d05a      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002488:	e062      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6899      	ldr	r1, [r3, #8]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f000 faf8 	bl	8002a8e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	609a      	str	r2, [r3, #8]
      break;
 80024b6:	e04e      	b.n	8002556 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	6899      	ldr	r1, [r3, #8]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f000 fae1 	bl	8002a8e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024da:	609a      	str	r2, [r3, #8]
      break;
 80024dc:	e03b      	b.n	8002556 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6859      	ldr	r1, [r3, #4]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	461a      	mov	r2, r3
 80024ec:	f000 fa58 	bl	80029a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2150      	movs	r1, #80	; 0x50
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 faaf 	bl	8002a5a <TIM_ITRx_SetConfig>
      break;
 80024fc:	e02b      	b.n	8002556 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6859      	ldr	r1, [r3, #4]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	461a      	mov	r2, r3
 800250c:	f000 fa76 	bl	80029fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2160      	movs	r1, #96	; 0x60
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fa9f 	bl	8002a5a <TIM_ITRx_SetConfig>
      break;
 800251c:	e01b      	b.n	8002556 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6859      	ldr	r1, [r3, #4]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	461a      	mov	r2, r3
 800252c:	f000 fa38 	bl	80029a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2140      	movs	r1, #64	; 0x40
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fa8f 	bl	8002a5a <TIM_ITRx_SetConfig>
      break;
 800253c:	e00b      	b.n	8002556 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4619      	mov	r1, r3
 8002548:	4610      	mov	r0, r2
 800254a:	f000 fa86 	bl	8002a5a <TIM_ITRx_SetConfig>
        break;
 800254e:	e002      	b.n	8002556 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002550:	bf00      	nop
 8002552:	e000      	b.n	8002556 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002554:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
	...

080025cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a29      	ldr	r2, [pc, #164]	; (8002684 <TIM_Base_SetConfig+0xb8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d00b      	beq.n	80025fc <TIM_Base_SetConfig+0x30>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ea:	d007      	beq.n	80025fc <TIM_Base_SetConfig+0x30>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a26      	ldr	r2, [pc, #152]	; (8002688 <TIM_Base_SetConfig+0xbc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d003      	beq.n	80025fc <TIM_Base_SetConfig+0x30>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a25      	ldr	r2, [pc, #148]	; (800268c <TIM_Base_SetConfig+0xc0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d108      	bne.n	800260e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a1c      	ldr	r2, [pc, #112]	; (8002684 <TIM_Base_SetConfig+0xb8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00b      	beq.n	800262e <TIM_Base_SetConfig+0x62>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261c:	d007      	beq.n	800262e <TIM_Base_SetConfig+0x62>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a19      	ldr	r2, [pc, #100]	; (8002688 <TIM_Base_SetConfig+0xbc>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d003      	beq.n	800262e <TIM_Base_SetConfig+0x62>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a18      	ldr	r2, [pc, #96]	; (800268c <TIM_Base_SetConfig+0xc0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d108      	bne.n	8002640 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a07      	ldr	r2, [pc, #28]	; (8002684 <TIM_Base_SetConfig+0xb8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d103      	bne.n	8002674 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	615a      	str	r2, [r3, #20]
}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	40012c00 	.word	0x40012c00
 8002688:	40000400 	.word	0x40000400
 800268c:	40000800 	.word	0x40000800

08002690 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	f023 0201 	bic.w	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0303 	bic.w	r3, r3, #3
 80026c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f023 0302 	bic.w	r3, r3, #2
 80026d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <TIM_OC1_SetConfig+0xc8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d10c      	bne.n	8002706 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f023 0308 	bic.w	r3, r3, #8
 80026f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f023 0304 	bic.w	r3, r3, #4
 8002704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a13      	ldr	r2, [pc, #76]	; (8002758 <TIM_OC1_SetConfig+0xc8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d111      	bne.n	8002732 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800271c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	621a      	str	r2, [r3, #32]
}
 800274c:	bf00      	nop
 800274e:	371c      	adds	r7, #28
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40012c00 	.word	0x40012c00

0800275c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	f023 0210 	bic.w	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800278a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f023 0320 	bic.w	r3, r3, #32
 80027a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a1d      	ldr	r2, [pc, #116]	; (800282c <TIM_OC2_SetConfig+0xd0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d10d      	bne.n	80027d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a14      	ldr	r2, [pc, #80]	; (800282c <TIM_OC2_SetConfig+0xd0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d113      	bne.n	8002808 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	621a      	str	r2, [r3, #32]
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	40012c00 	.word	0x40012c00

08002830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 0303 	bic.w	r3, r3, #3
 8002866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <TIM_OC3_SetConfig+0xd0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d10d      	bne.n	80028aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a14      	ldr	r2, [pc, #80]	; (8002900 <TIM_OC3_SetConfig+0xd0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d113      	bne.n	80028da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	621a      	str	r2, [r3, #32]
}
 80028f4:	bf00      	nop
 80028f6:	371c      	adds	r7, #28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40012c00 	.word	0x40012c00

08002904 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4313      	orrs	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800294e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	031b      	lsls	r3, r3, #12
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a0f      	ldr	r2, [pc, #60]	; (800299c <TIM_OC4_SetConfig+0x98>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d109      	bne.n	8002978 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800296a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	019b      	lsls	r3, r3, #6
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	621a      	str	r2, [r3, #32]
}
 8002992:	bf00      	nop
 8002994:	371c      	adds	r7, #28
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	40012c00 	.word	0x40012c00

080029a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f023 0201 	bic.w	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f023 030a 	bic.w	r3, r3, #10
 80029dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	621a      	str	r2, [r3, #32]
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f023 0210 	bic.w	r2, r3, #16
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	031b      	lsls	r3, r3, #12
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	621a      	str	r2, [r3, #32]
}
 8002a50:	bf00      	nop
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f043 0307 	orr.w	r3, r3, #7
 8002a7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	609a      	str	r2, [r3, #8]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b087      	sub	sp, #28
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	021a      	lsls	r2, r3, #8
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	609a      	str	r2, [r3, #8]
}
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e046      	b.n	8002b72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a16      	ldr	r2, [pc, #88]	; (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00e      	beq.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b30:	d009      	beq.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a12      	ldr	r2, [pc, #72]	; (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d004      	beq.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a10      	ldr	r2, [pc, #64]	; (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10c      	bne.n	8002b60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40000800 	.word	0x40000800

08002b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e03f      	b.n	8002c3e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fd fd98 	bl	8000708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2224      	movs	r2, #36	; 0x24
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f829 	bl	8002c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c82:	f023 030c 	bic.w	r3, r3, #12
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a2c      	ldr	r2, [pc, #176]	; (8002d5c <UART_SetConfig+0x114>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d103      	bne.n	8002cb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002cb0:	f7ff f844 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	e002      	b.n	8002cbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002cb8:	f7ff f82c 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8002cbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009a      	lsls	r2, r3, #2
 8002cc8:	441a      	add	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	4a22      	ldr	r2, [pc, #136]	; (8002d60 <UART_SetConfig+0x118>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	0119      	lsls	r1, r3, #4
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009a      	lsls	r2, r3, #2
 8002ce8:	441a      	add	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cf4:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <UART_SetConfig+0x118>)
 8002cf6:	fba3 0302 	umull	r0, r3, r3, r2
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	2064      	movs	r0, #100	; 0x64
 8002cfe:	fb00 f303 	mul.w	r3, r0, r3
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	3332      	adds	r3, #50	; 0x32
 8002d08:	4a15      	ldr	r2, [pc, #84]	; (8002d60 <UART_SetConfig+0x118>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d14:	4419      	add	r1, r3
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009a      	lsls	r2, r3, #2
 8002d20:	441a      	add	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <UART_SetConfig+0x118>)
 8002d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	2064      	movs	r0, #100	; 0x64
 8002d36:	fb00 f303 	mul.w	r3, r0, r3
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	3332      	adds	r3, #50	; 0x32
 8002d40:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <UART_SetConfig+0x118>)
 8002d42:	fba2 2303 	umull	r2, r3, r2, r3
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	f003 020f 	and.w	r2, r3, #15
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	440a      	add	r2, r1
 8002d52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	51eb851f 	.word	0x51eb851f

08002d64 <__libc_init_array>:
 8002d64:	b570      	push	{r4, r5, r6, lr}
 8002d66:	2600      	movs	r6, #0
 8002d68:	4d0c      	ldr	r5, [pc, #48]	; (8002d9c <__libc_init_array+0x38>)
 8002d6a:	4c0d      	ldr	r4, [pc, #52]	; (8002da0 <__libc_init_array+0x3c>)
 8002d6c:	1b64      	subs	r4, r4, r5
 8002d6e:	10a4      	asrs	r4, r4, #2
 8002d70:	42a6      	cmp	r6, r4
 8002d72:	d109      	bne.n	8002d88 <__libc_init_array+0x24>
 8002d74:	f000 f822 	bl	8002dbc <_init>
 8002d78:	2600      	movs	r6, #0
 8002d7a:	4d0a      	ldr	r5, [pc, #40]	; (8002da4 <__libc_init_array+0x40>)
 8002d7c:	4c0a      	ldr	r4, [pc, #40]	; (8002da8 <__libc_init_array+0x44>)
 8002d7e:	1b64      	subs	r4, r4, r5
 8002d80:	10a4      	asrs	r4, r4, #2
 8002d82:	42a6      	cmp	r6, r4
 8002d84:	d105      	bne.n	8002d92 <__libc_init_array+0x2e>
 8002d86:	bd70      	pop	{r4, r5, r6, pc}
 8002d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d8c:	4798      	blx	r3
 8002d8e:	3601      	adds	r6, #1
 8002d90:	e7ee      	b.n	8002d70 <__libc_init_array+0xc>
 8002d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d96:	4798      	blx	r3
 8002d98:	3601      	adds	r6, #1
 8002d9a:	e7f2      	b.n	8002d82 <__libc_init_array+0x1e>
 8002d9c:	08002dfc 	.word	0x08002dfc
 8002da0:	08002dfc 	.word	0x08002dfc
 8002da4:	08002dfc 	.word	0x08002dfc
 8002da8:	08002e00 	.word	0x08002e00

08002dac <memset>:
 8002dac:	4603      	mov	r3, r0
 8002dae:	4402      	add	r2, r0
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d100      	bne.n	8002db6 <memset+0xa>
 8002db4:	4770      	bx	lr
 8002db6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dba:	e7f9      	b.n	8002db0 <memset+0x4>

08002dbc <_init>:
 8002dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dbe:	bf00      	nop
 8002dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc2:	bc08      	pop	{r3}
 8002dc4:	469e      	mov	lr, r3
 8002dc6:	4770      	bx	lr

08002dc8 <_fini>:
 8002dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dca:	bf00      	nop
 8002dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dce:	bc08      	pop	{r3}
 8002dd0:	469e      	mov	lr, r3
 8002dd2:	4770      	bx	lr
